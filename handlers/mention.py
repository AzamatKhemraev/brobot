from aiogram import Router, types
from services.gpt import chat_with_gpt
import asyncio

router = Router()

BOT_ALIASES = ["@bro", "@brobot", "bro", "brobot"]


@router.message()
async def mention_gpt_reply(message: types.Message):
    text = (message.text or "").lower()

    if any(alias in text for alias in BOT_ALIASES):
        asyncio.create_task(respond_with_gpt(message))


async def respond_with_gpt(message: types.Message):
    try:
        gpt_reply = await chat_with_gpt(message.text)

        # üí° –ó–∞—â–∏—Ç–∞ –æ—Ç None ‚Äî –µ—Å–ª–∏ GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏—á–µ–≥–æ
        if not isinstance(gpt_reply, str) or not gpt_reply.strip():
            gpt_reply = "ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

        await message.reply(gpt_reply)

    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç GPT:\n`{e}`", parse_mode="Markdown")


def register_handlers(dp):
    dp.include_router(router)
