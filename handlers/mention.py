from aiogram import Router, types
from services.gpt import chat_with_gpt
from services.context import add_to_history, get_history
import asyncio

router = Router()

BOT_ALIASES = ["@bro", "@brobot", "bro", "brobot"]


@router.message()
async def mention_gpt_reply(message: types.Message):
    text = (message.text or "").lower()

    user_id = message.from_user.id
    username = message.from_user.username or None
    full_name = message.from_user.full_name

    if any(alias in text for alias in BOT_ALIASES):
        asyncio.create_task(respond_with_gpt(message))
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        add_to_history(
            chat_id=message.chat.id,
            user_id=user_id,
            username=username,
            full_name=full_name,
            role="user",
            content=message.text
        )


async def respond_with_gpt(message: types.Message):
    try:
        chat_id = message.chat.id

        user_id = message.from_user.id
        username = message.from_user.username or None
        full_name = message.from_user.full_name

        # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(
            chat_id=chat_id,
            user_id=user_id,
            username=username,
            full_name=full_name,
            role="user",
            content=message.text
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        history = get_history(chat_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–ª–æ–≥ –∏ –∏—Å—Ç–æ—Ä–∏—é –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
        prompt_text = format_history_prompt(history)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ GPT
        gpt_reply = await chat_with_gpt([
            {"role": "system", "content": "–¢—ã —Ä–æ–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è."},
            {"role": "user", "content": prompt_text}
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(
            chat_id=chat_id,
            user_id=0,
            username=None,
            full_name="ü§ñ",
            role="assistant",
            content=gpt_reply
        )

        if not isinstance(gpt_reply, str) or not gpt_reply.strip():
            gpt_reply = "ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

        await message.reply(gpt_reply)

    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç GPT:\n`{e}`", parse_mode="Markdown")


def format_history_prompt(history):
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    unique_users = {msg["user_id"]: msg for msg in history if msg["role"] == "user"}

    intro = "–≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç. –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(
        f"- {v['full_name']} (@{v['username']})" if v['username'] else f"- {v['full_name']}"
        for v in unique_users.values()
    ) + "\n\n–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n"

    dialogue = "\n".join(
        f"{msg['full_name']}: {msg['content']}" for msg in history
    )

    return intro + dialogue
