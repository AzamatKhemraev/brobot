from aiogram import Router, types
from services.gpt import chat_with_gpt
from services.context import add_to_history, get_history
import asyncio

router = Router()

BOT_ALIASES = ["@bro", "@brobot", "bro", "brobot"]


@router.message()
async def mention_gpt_reply(message: types.Message):
    text = (message.text or "").lower()

    if any(alias in text for alias in BOT_ALIASES):
        asyncio.create_task(respond_with_gpt(message))
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ user-—Ä–µ–ø–ª–∏–∫—É
        add_to_history(message.chat.id, "user", message.text or "")


async def respond_with_gpt(message: types.Message):
    try:
        chat_id = message.chat.id

        # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(chat_id, "user", message.text)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        history = get_history(chat_id)

        # –î–æ–±–∞–≤–∏–º system prompt –≤ –Ω–∞—á–∞–ª–æ
        prompt = [{"role": "system", "content": "–¢—ã —Ä–æ–±–æ—Ç –ø–æ–º–æ—à–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è."}] + history

        gpt_reply = await chat_with_gpt(prompt)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_history(chat_id, "assistant", gpt_reply)

        # üí° –ó–∞—â–∏—Ç–∞ –æ—Ç None ‚Äî –µ—Å–ª–∏ GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏—á–µ–≥–æ
        if not isinstance(gpt_reply, str) or not gpt_reply.strip():
            gpt_reply = "ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

        await message.reply(gpt_reply)

    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç GPT:\n`{e}`", parse_mode="Markdown")


def register_handlers(dp):
    dp.include_router(router)
