from aiogram import Router, types
from collections import deque
import datetime
# import asyncio

from services.gpt import chat_with_gpt

router = Router()

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç—É
chat_activity = {}  # chat_id: deque[(text, timestamp)]

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_MESSAGES = 5
TIME_WINDOW = 60  # —Å–µ–∫—É–Ω–¥
COOLDOWN = 600    # –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —á–∞—â–µ, —á–µ–º 1 —Ä–∞–∑ –≤ 10 –º–∏–Ω

last_bot_reply = {}  # chat_id: datetime


@router.message()
async def watch_chat(message: types.Message):
    # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
    if message.chat.type not in ["group", "supergroup"]:
        return

    chat_id = message.chat.id
    now = datetime.datetime.utcnow()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if chat_id not in chat_activity:
        chat_activity[chat_id] = deque(maxlen=MAX_MESSAGES)

    chat_activity[chat_id].append((message.text or "", now))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    messages = chat_activity[chat_id]
    if len(messages) < MAX_MESSAGES:
        return

    first_time = messages[0][1]
    last_time = messages[-1][1]
    delta = (last_time - first_time).total_seconds()

    if delta > TIME_WINDOW:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cooldown
    if chat_id in last_bot_reply:
        since_last = (now - last_bot_reply[chat_id]).total_seconds()
        if since_last < COOLDOWN:
            return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–∑–æ–≤ GPT
    await message.bot.send_chat_action(chat_id, "typing")

    context = "\n".join([f"- {text}" for text, _ in messages if text])
    prompt = f"–¢—ã –Ω–∞–±–ª—é–¥–∞–µ—à—å –¥–∏–∞–ª–æ–≥ –≤ —á–∞—Ç–µ. –û—Ç–≤–µ—Ç—å –≤ —Ç–µ–º—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏–ª–∏ —Å —é–º–æ—Ä–æ–º.\n–í–æ—Ç —á—Ç–æ –æ–±—Å—É–∂–¥–∞—é—Ç:\n{context}"

    gpt_response = await chat_with_gpt(prompt)

    await message.answer(gpt_response)
    last_bot_reply[chat_id] = now

    print(f"üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp):
    dp.include_router(router)
